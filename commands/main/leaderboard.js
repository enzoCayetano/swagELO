const { SlashCommandBuilder, EmbedBuilder } = require('discord.js')
const category = __dirname.split('/').pop()
const Model = require('../../schemas/user.js');

// FiNISH

module.exports = {
  data: new SlashCommandBuilder()
    .setName('leaderboard')
    .setDescription('Check the leaderboard!')
    .addStringOption(option => 
      option.setName('type')
        .setDescription('Select leaderboard to show.')
        .setRequired(true)
        .addChoices({ name: 'Ranked', value: 'ranked' })
        .addChoices({ name: 'Unranked', value: 'unranked' })
    ),
  category,
  async execute(interaction) {
    try {
      const type = interaction.options.getString('type')

      let sortField
      switch(type) {
        case 'ranked':
          sortField = 'Ranked'
          break
        case 'unranked':
          sortField = 'Unranked'
          break
        default:
          return interaction.reply('Invalid leaderboard type. Select either Ranked or Unranked.')
      }

      const entries = await Model.find({})
        .sort({ [sortField]: -1 })
        .limit(25)

      const leaderboard = entries.map((entry, index) => {
        let prefix = `${index + 1}: `;
        if (index < 3) {
            // Bold the top three entries
            return `**${prefix} ${entry.Rank} ${entry[sortField]} ${type.toUpperCase()} ${entry.username}**`;
        }
        return `${prefix} ${entry.Rank} ${entry[sortField]} ${type.toUpperCase()} ${entry.username}`;
      }).join('\n')

      const newEmbed = new EmbedBuilder()
        .setColor(0x8B0000)
        .setTitle('CURRENT RANKINGS')
        .setDescription(`Top 25 Players - ${type.toUpperCase()} Leaderboard`)
        .addFields({
          name: 'Rankings', value: leaderboard || 'No data.',
        })
        .setFooter({
          text: 'Generated by ARMM', 
          iconURL: 'https://s3.amazonaws.com/challonge_app/organizations/images/000/055/281/hdpi/ARCL_Logo_Square.png?1544117144'
        })
        .setTimestamp()

      await interaction.reply({ embeds: [newEmbed] })
    } catch (error) {
      console.error(error)
      await interaction.reply(`An error occurred: ${error}`)
    }
  },
}